openapi: 3.0.0
info:
  title: Auction Management API
  description: API for managing Auction resources
  version: 1.0.0
servers:
  - url: "https://auction-website-auji.onrender.com"
    description: Deployed development server
  - url: "http://localhost:5000"
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Users:
      type: object
      required:
        - username
        - firstname
        - lastname
        - email
        - password
        - location
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        location:
          type: string
      example:
        firstname: "John"
        lastname: "Doe"
        username: "john_doe"
        email: "john.doe@example.com"
        location: "Locat123"
        password: "******************"

    updateUser:
      type: object
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        location:
          type: string
        photo:
          type: string
          format: binary
      example:
        firstname: "John"
        lastname: "Doe"
        username: "john_doe"
        email: "john.doe@example.com"
        location: "Locat123"
        photo: photo.jpg

    Auth:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
      example:
        username: "john_doe"
        password: "******************"

    ChangePassword:
      type: object
      required:
        - existingPassword
        - newPassword
      properties:
        existingPassword:
          type: string
        newPassword:
          type: string
      example:
        existingPassword: "******************"
        newPassword: "******************"

    ForgotPassword:
      type: object
      required:
        - email
      properties:
        email:
          type: string
      example:
        email: "email@example.com"

    ResetPassword:
      type: object
      required:
        - email
        - otp
        - newPassword
      properties:
        email:
          type: string
        otp:
          type: string
        newPassword:
          type: string
      example:
        email: "email@example.com"
        otp: "------"
        newPassword: "******************"

    Contact:
      type: object
      required:
        - firstname
        - lastname
        - email
        - address
        - message
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
        address:
          type: message
      example:
        firstname: "Jane"
        lastname: "Doe"
        email: "jane.doe@example.com"
        address: "123 Main St, Anytown, USA"
        message: "Hello ..."

    Subscription:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
      example:
        email: "jane.doe@example.com"

    Donation:
      type: object
      required:
        - firstname
        - lastname
        - email
        - amount
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
        amount:
          type: number
      example:
        firstname: "Jane"
        lastname: "Doe"
        email: "jane.doe@example.com"
        amount: 100

    Payment:
      type: object
      required:
        - card_Name
        - card_ExpYear
        - card_ExpMonth
        - card_CVC
        - card_Number
      properties:
        card_Name:
          type: string
        card_ExpYear:
          type: integer
          format: int32
        card_ExpMonth:
          type: integer
          format: int32
        card_CVC:
          type: string
        card_Number:
          type: string
      example:
        card_Name: "John Doe"
        card_ExpYear: 2024
        card_ExpMonth: "12"
        card_CVC: "123"
        card_Number: 4242424242424242

tags:
  - name: userManagement
    description: The user managing API
  - name: authManagement
    description: The auth managing API
  - name: contactManagement
    description: The contact managing API
  - name: subscriptionManagement
    description: The subscription managing API
  - name: donationManagement
    description: The donation managing API
  - name: paymentManagement
    description: The payment managing API

paths:
  /api/v1/users:
    post:
      summary: Register a new user
      tags: [userManagement]
      description: Endpoint to register a new user to the system
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"
      responses:
        "200":
          description: User added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          description: Unauthorized, authentication error
        "500":
          description: Internal server error

    get:
      summary: Get all Users
      tags: [userManagement]
      description: Endpoint to retrieve all Users
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: User not found
        "500":
          description: Internal server error

    put:
      summary: Update a User
      tags: [userManagement]
      description: Endpoint to update a User
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/updateUser"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateUser"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: User not found
        "500":
          description: Internal server error

  /api/v1/users/{id}:
    get:
      summary: Get a User by ID
      tags: [userManagement]
      description: Endpoint to retrieve a User by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The User id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: User not found

    delete:
      summary: Delete a User by ID
      tags: [userManagement]
      description: Endpoint to delete a User by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The User id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: User not found
        "500":
          description: Internal server error

  /api/v1/auth:
    post:
      summary: Login to your account
      tags: [authManagement]
      description: Endpoint to log user in the system
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Auth"
      responses:
        "200":
          description: User logged in successfully
        "401":
          description: Unauthorized, authentication error
        "404":
          description: User not found
        "500":
          description: Internal server error

  /api/v1/auth/logout:
    post:
      summary: Logout from your account
      tags: [authManagement]
      description: Endpoint to log user out the system
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User logged out successfully
        "500":
          description: Internal server error

  /api/v1/auth/changepassword:
    post:
      summary: Change password
      tags: [authManagement]
      description: Endpoint to change user's password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
      responses:
        "200":
          description: User changed password successfully
        "401":
          description: Password does match
        "404":
          description: User not found
        "500":
          description: Internal server error

  /api/v1/auth/forgotpassword:
    post:
      summary: Forgot password
      tags: [authManagement]
      description: Endpoint for user who forgot password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPassword"
      responses:
        "200":
          description: Password otp generated successfully
        "404":
          description: User not found
        "500":
          description: Internal server error

  /api/v1/auth/resetpassword:
    post:
      summary: Reset password
      tags: [authManagement]
      description: Endpoint for user to reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPassword"
      responses:
        "200":
          description: Password otp generated successfully
        "404":
          description: User not found
        "500":
          description: Internal server error

  /api/v1/contacts:
    post:
      summary: Create a new contact
      tags: [contactManagement]
      description: Endpoint to create a new contact
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
      responses:
        "201":
          description: Contact created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          description: Validation error
        "401":
          description: Unauthorized, authentication error
        "500":
          description: Internal server error

    get:
      summary: Get all contacts
      tags: [contactManagement]
      description: Endpoint to retrieve all contacts
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contact"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Contacts not found
        "500":
          description: Internal server error

  /api/v1/contacts/{id}:
    get:
      summary: Get a contact by ID
      tags: [contactManagement]
      description: Endpoint to retrieve a contact by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The contact id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Contact not found
        "500":
          description: Internal server error

    put:
      summary: Update a contact by ID
      tags: [contactManagement]
      description: Endpoint to update a contact by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The contact id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Contact not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a contact by ID
      tags: [contactManagement]
      description: Endpoint to delete a contact by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The contact id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Contact not found
        "500":
          description: Internal server error

  /api/v1/subscriptions:
    post:
      summary: Create a new subscription
      tags: [subscriptionManagement]
      description: Endpoint to create a new subscription
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Subscription"
      responses:
        "201":
          description: Subscription created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "400":
          description: Validation error
        "401":
          description: Unauthorized, authentication error
        "500":
          description: Internal server error

    get:
      summary: Get all subscriptions
      tags: [subscriptionManagement]
      description: Endpoint to retrieve all subscriptions
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subscription"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Subscriptions not found
        "500":
          description: Internal server error

  /api/v1/subscriptions/{id}:
    get:
      summary: Get a subscription by ID
      tags: [subscriptionManagement]
      description: Endpoint to retrieve a subscription by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The subscription id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Subscription not found
        "500":
          description: Internal server error

    put:
      summary: Update a subscription by ID
      tags: [subscriptionManagement]
      description: Endpoint to update a subscription by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The subscription id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Subscription"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Subscription not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a subscription by ID
      tags: [subscriptionManagement]
      description: Endpoint to delete a subscription by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The subscription id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Subscription not found
        "500":
          description: Internal server error

  /api/v1/donations:
    post:
      summary: Create a new donation
      tags: [donationManagement]
      description: Endpoint to create a new donation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Donation"
      responses:
        "201":
          description: Donation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Donation"
        "400":
          description: Validation error
        "401":
          description: Unauthorized, authentication error
        "500":
          description: Internal server error

    get:
      summary: Get all donations
      tags: [donationManagement]
      description: Endpoint to retrieve all donations
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Donation"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Donations not found
        "500":
          description: Internal server error

  /api/v1/donations/{id}:
    get:
      summary: Get a donation by ID
      tags: [donationManagement]
      description: Endpoint to retrieve a donation by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The donation id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Donation"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Donation not found
        "500":
          description: Internal server error

    put:
      summary: Update a donation by ID
      tags: [donationManagement]
      description: Endpoint to update a donation by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The donation id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Donation"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Donation"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Donation not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a donation by ID
      tags: [donationManagement]
      description: Endpoint to delete a donation by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The donation id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Donation"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Donation not found
        "500":
          description: Internal server error

  /api/v1/payments:
    get:
      summary: Get all payments
      tags: [paymentManagement]
      description: Endpoint to retrieve all payments
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Payments not found

  /api/v1/payments/{id}:
    post:
      summary: Create a new payment
      tags: [paymentManagement]
      description: Endpoint to create a new payment
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The donation id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
      responses:
        "201":
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "400":
          description: Validation error
        "401":
          description: Unauthorized, authentication error
        "500":
          description: Internal server error

    get:
      summary: Get a payment by ID
      tags: [paymentManagement]
      description: Endpoint to retrieve a payment by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The payment id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Payment not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a payment by ID
      tags: [paymentManagement]
      description: Endpoint to delete a payment by its ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The payment id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Payment not found
        "500":
          description: Internal server error
  
  /api/v1/payments/donators:
    get:
      summary: Get all donators
      tags: [paymentManagement]
      description: Endpoint to retrieve donators who made payments
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
        "401":
          description: Unauthorized, authentication error
        "404":
          description: Donators not found
